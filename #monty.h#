#ifndef MONTY_H
#define MONTY_H

#define _GNU_SOURCE
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdarg.h>

/**
 * struct stack_s - doubly linked list representation of a stack (or queue)
 * @n: integer
 * @prev: points to the previous element of the stack (or queue)
 * @next: points to the next element of the stack (or queue)
 *
 * Description: doubly linked list node structure
 * for stack, queues, LIFO, FIFO
 */
typedef struct stack_s
{
        int n;
        struct stack_s *prev;
        struct stack_s *next;
} stack_t;

/**
 * struct instruction_s - opcode and its function
 * @opcode: the opcode
 * @f: function to handle the opcode
 *
 * Description: opcode and its function
 * for stack, queues, LIFO, FIFO
 */
typedef struct instruction_s
{
        char *opcode;
        void (*f)(stack_t **stack, unsigned int line_number);
} instruction_t;

stack_t *head = NULL;
extern stack_t *head;
/usr/bin/ld: /tmp/ccFQGyjr.o:(.bss+0x0): multiple definition of `head'; /tmp/cckg3MRm.o:(.bss+0x0): first defined here
/usr/bin/ld: /tmp/ccxpPx4o.o:(.bss+0x0): multiple definition of `head'; /tmp/cckg3MRm.o:(.bss+0x0): first defined here
/usr/bin/ld: /tmp/cc24BN8o.o:(.bss+0x0): multiple definition of `head'; /tmp/cckg3MRm.o:(.bss+0x0): first defined here
/usr/bin/ld: /tmp/ccLZamCn.o:(.bss+0x0): multiple definition of `head'; /tmp/cckg3MRm.o:(.bss+0x0): first defined here
/usr/bin/ld: /tmp/ccyvpQSo.o:(.bss+0x0): multiple definition of `head'; /tmp/cckg3MRm.o:(.bss+0x0): first defined here
collect2: error: ld returned 1 exit statustypedef void (*op_func)(stack_t **, unsigned int);

/*in Free File*/
void nFree(void);
void pFree(char *c);

/*in FileFun File*/
void executeing(char *file_name);
int analyser(char *line, int lnum, int fmt);
void rfile(FILE *);

/*in error File*/
void fErr(int error_code, ...);

/*in Func File*/
void finder(char *oc, char *value, int lnum, int fmt);
void callingFun(op_func f, char *ops, char *value, int lnum, int fmt);

/*in QueueStack File*/
stack_t *createNode(int n);
void addToQueue(stack_t **);

#endif
